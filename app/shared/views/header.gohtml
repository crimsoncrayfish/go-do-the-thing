<!DOCTYPE html>
<html lang="en">
{{ block "header" . }}
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="htmx-config" content='{"useTemplateFragments": true}'>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700&display=swap" rel="stylesheet">
        <title>TODO: Add title</title>
        <link rel="stylesheet" href="/static/css/tailwind.css"/>
        <link rel="icon" type="image/x-icon" href="/static/img/todo.ico">
        <script src="/static/js/htmx.js"></script>
        <script>
            htmx.config.useTemplateFragments = true;
            htmx.config.allowNestedOobSwaps = true;
            document.addEventListener("DOMContentLoaded", (_) => {
                document.body.addEventListener('htmx:beforeSwap', function (evt) {
                    if (evt.detail.xhr.status === 422) {
                        evt.detail.shouldSwap = true;
                        evt.detail.isError = false;
                    }
                    if (evt.detail.xhr.status === 500) {
                        evt.detail.shouldSwap = true;
                        evt.detail.isError = false;
                    }
                });
                document.body.addEventListener('htmx:configRequest', function (evt) {
                    evt.detail.headers['accept'] = 'text/html'
                    evt.detail.headers['authorization'] = getAuthToken(); // add a new parameter into the mix
                });
            })

            function getAuthToken() {
                return "bearer placeholder token"
            }

            function toggleClassForId(className, elementId) {
                const elem = document.getElementById(elementId)
                if (elem.classList.contains(className)) {
                    elem.classList.remove(className);
                    return;
                }
                elem.classList.add(className);
            }

            function swapClassForId(class1Name, class2Name, elementId) {
                const elem = document.getElementById(elementId)
                if (elem.classList.contains(class1Name)) {
                    elem.classList.remove(class1Name);
                    elem.classList.add(class2Name);
                    return;
                }

                elem.classList.add(class1Name);
                elem.classList.remove(class2Name);
            }
        </script>
    </head>
{{ end }}
</html>
