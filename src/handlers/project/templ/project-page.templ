package templ_project

import (
	"fmt"
	"go-do-the-thing/src/handlers/task/templ"
	"go-do-the-thing/src/helpers/constants"
	"go-do-the-thing/src/models"
	fm "go-do-the-thing/src/models/forms"
	ts "go-do-the-thing/src/shared/templ"
)

templ ProjectWithBody(project models.ProjectView,
	activeScreen models.Screen,
	formdata fm.ProjectForm,
	task_form_data fm.TaskForm,
	tasks []*models.TaskView,
) {
	@ts.Main(ProjectView(project, activeScreen, formdata, task_form_data, tasks))
}

templ ProjectView(
	project models.ProjectView,
	activeScreen models.Screen,
	formdata fm.ProjectForm,
	task_form_data fm.TaskForm,
	tasks []*models.TaskView,
) {
	@ts.NavBar(activeScreen)
	<div class="px-1 my-4 sm:px-[5%] xl:px-[10%] w-full text-text-on-light dark:text-text-on-dark mb-10">
		<div class="flex justify-between items-center mb-4">
			<button
				hx-get="/projects"
				hx-replace-url="true"
				hx-target="body"
				class="text-text-on-light dark:text-text-on-dark hover:opacity-80 transition-opacity flex items-center gap-2"
			>
				@ts.SvgBack()
				Back
			</button>
			<button
				onclick="toggleProjectEdit()"
				id="edit-project-button"
				class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark rounded-full font-medium transition-all px-4 py-2 flex items-center gap-2"
			>
				@ts.SvgEdit()
				Edit
			</button>
		</div>
		@ProjectContent(project, false, map[string]string{})
		<div class="mx-auto px-4 flex  items-center justify-between mb-4">
			<div>
				<button
					hx-get={ fmt.Sprintf("/todo/item/create/panel?project_id=%d", project.Id) }
					hx-target="#edit-panel"
					hx-swap="outerHTML"
					hx-indicator="#edit-panel-loader"
					onclick="openEditPanel()"
					class="bg-success-light dark:bg-success-dark hover:opacity-80 text-text-on-light dark:text-white font-bold py-2 px-4 rounded-full shadow-md focus:outline-none focus:ring-2 focus:ring-success-dark focus:ring-opacity-50 flex items-center"
				>
					@ts.SvgPlus()
					&nbsp;New Task
				</button>
			</div>
		</div>
		@templ_todo.TaskListContent(tasks)
	</div>
}

templ ProjectContent(project models.ProjectView, is_editing bool, errors map[string]string) {
	<form
		hx-put={ fmt.Sprintf("/project/%d", project.Id) }
		id="project-content-form"
		hx-indicator="#edit-panel-loader"
	>
		<div class="mb-4 theme-transition bg-secondary-light dark:bg-secondary-dark rounded-xl p-4 border border-border-light dark:border-border-dark shadow-lg">
			<div class="flex items-center justify-between p-4 md:p-5 border-b border-border-light dark:border-border-dark rounded-t">
				<div class="flex items-center gap-3 w-full">
					<div
						id="project-title-view"
						class={ templ.KV("hidden", is_editing), "text-2xl font-bold text-text-on-light dark:text-text-on-dark" }
					>
						{ project.Name }
					</div>
					<input
						type="text"
						id="project-name-edit"
						name="name"
						class={ templ.KV("hidden", !is_editing), "w-full bg-primary-light dark:bg-primary-dark border border-border-light dark:border-border-dark rounded-lg px-4 py-2 text-2xl font-bold text-text-on-light dark:text-text-on-dark" }
						value={ project.Name }
					/>
				</div>
				<button
					type="button"
					onclick="toggleProjectEdit()"
					id="edit-project-button"
					class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark rounded-full font-medium transition-all px-4 py-2 flex items-center gap-2"
				>
					@ts.SvgEdit()
					<span>Edit</span>
				</button>
			</div>
			<div class="p-4 bg-transparent border-b border-border-light dark:border-border-dark divide-border-light dark:divide-border-dark">
				<div
					id="project-description-view"
					class={ templ.KV("hidden", is_editing), "mb-4 text-text-on-light dark:text-text-on-dark" }
				>
					if len(project.Description) > 0 {
						{ project.Description }
					} else {
						"..."
					}
				</div>
				<textarea
					id="project-description-edit"
					name="description"
					class={ templ.KV("hidden", !is_editing), "w-full bg-primary-light dark:bg-primary-dark border border-border-light dark:border-border-dark rounded-lg px-4 py-2 text-text-on-light dark:text-text-on-dark min-h-[100px]" }
				>{ project.Description }</textarea>
				<div class="sm:flex w-full sm:justify-between items-center text-sm text-text-on-light/70 dark:text-text-on-dark/70 mt-4">
					<p>Assigned To: <span class="text-text-on-light dark:text-text-on-dark">{ project.Owner.FullName }</span></p>
					<div>
						<h3 class="text-sm font-medium text-text-on-light/70 dark:text-text-on-dark/70 mb-1">Due Date</h3>
						<p
							id="project-due-date-view"
							class={ templ.KV("hidden", is_editing), "text-text-on-light dark:text-text-on-dark" }
						>{ project.DueDate.Format(constants.PrettyDateFormat) }</p>
						<div id="project-due-date-edit" class={ templ.KV("hidden", !is_editing) }>
							<div class="mt-2 relative">
								<div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
									<svg
										class="w-4 h-4 text-text-on-light dark:text-text-on-dark"
										aria-hidden="true"
										xmlns="http://www.w3.org/2000/svg"
										fill="currentColor"
										viewBox="0 0 20 20"
									>
										<path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"></path>
									</svg>
								</div>
								<input
									type="text"
									name="due_date"
									value={ project.DueDate.Format(constants.DateFormat) }
									placeholder="Due Date"
									id="datepicker-format"
									datepicker
									datepicker-format="yyyy-mm-dd"
									class={ "border border-border-light text-text-on-light text-sm rounded-lg block w-full ps-10 p-2.5",
									"bg-primary-light dark:bg-primary-dark dark:border-border-dark",
									"dark:placeholder-accent-dark placeholder-accent-light",
									"dark:text-text-on-dark focus:ring-accent-light focus:border-border-light dark:focus:ring-accent-dark dark:focus:border-border-dark" }
								/>
							</div>
						</div>
					</div>
				</div>
				<div class="text-sm text-text-on-light/70 dark:text-text-on-dark/70 mt-2">Created by: <span class="text-text-on-light dark:text-text-on-dark">{ project.CreatedBy.FullName }</span></div>
				<div class="text-sm text-text-on-light/70 dark:text-text-on-dark/70">Created on: <span class="text-text-on-light dark:text-text-on-dark">{ project.CreatedDate.Format(constants.PrettyDateFormat) }</span></div>
			</div>
			@projectEditActions(is_editing)
		</div>
	</form>
	//@projectTagList(project.Tags)
}

templ projectTagList(tags []models.TagView) {
	<div class="text-text-on-light dark:text-text-on-dark">
		<div id="tag-list" class="flex gap-2">
			for _, tag := range tags {
				@TagItem(tag)
			}
		</div>
		<div
			class="flex items-center gap-4 rounded-lg border px-4 py-3 shadow-sm
        border-border-light bg-primary-light
        dark:border-border-dark dark:bg-primary-dark"
		>
			<input
				type="text"
				id="new-tag-name-input"
				placeholder="New tag name"
				class="flex-grow rounded-md border px-3 py-2
          placeholder:text-text-on-light
          focus:outline-none focus:ring-2
          border-border-light bg-secondary-light text-text-on-light focus:ring-accent-light
          transition-colors duration-200
          dark:border-border-dark dark:bg-secondary-dark dark:text-text-on-dark dark:placeholder:text-text-on-dark dark:focus:ring-accent-dark"
			/>
			<input
				type="color"
				id="new-tag-color-input"
				value="#B197FC"
				class="block h-10 w-14 cursor-pointer rounded-lg border p-1
          disabled:pointer-events-none disabled:opacity-50
          border-border-light bg-secondary-light
          dark:border-border-dark dark:bg-secondary-dark"
				title="Choose your color"
			/>
			<button
				id="add-tag-button"
				class="rounded-md p-2
          text-white
          bg-success-light hover:bg-success-dark
          transition-colors duration-200"
				aria-label="Add tag"
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="h-5 w-5"
					viewBox="0 0 20 20"
					fill="currentColor"
				>
					<path
						fill-rule="evenodd"
						d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
						clip-rule="evenodd"
					></path>
				</svg>
			</button>
		</div>
	</div>
}

templ TagItem(tag models.TagView) {
	<span
		onclick={ templ.JSFuncCall("toggleTagEditorPopup", tag.Id) }
		id={ fmt.Sprintf("tag-%d", tag.Id) }
		class="inline-flex items-center gap-1 text-white text-xs font-bold py-1 px-3 rounded-full shadow-sm cursor-pointer hover:shadow-md transition-shadow mb-1 sm:mb-0"
		style={ fmt.Sprintf("background-color:%s", tag.Color) }
	>
		@ts.SvgHexTag(tag.Color)
		{ tag.Name }
	</span>
}

templ ProjectContentOOB(project models.ProjectView, is_editing bool, errors map[string]string) {
	<div>
		@ProjectContent(project, is_editing, errors)
	</div>
}

templ projectEditActions(is_editing bool) {
	<script>
        function toggleProjectEdit() {
            toggleClassForId('hidden','project-title-view');
            toggleClassForId('hidden','project-description-view');
            toggleClassForId('hidden','project-due-date-view');

            toggleClassForId('hidden','project-name-edit');
            toggleClassForId('hidden','project-description-edit');
            toggleClassForId('hidden','project-due-date-edit');

            toggleClassForId('hidden','project-edit-actions');
        }
	</script>
	<div id="project-edit-actions" class={ templ.KV("hidden", !is_editing), "mt-6 flex justify-end gap-2" }>
		<button
			type="button"
			onclick="toggleProjectEdit()"
			class="px-4 py-2 rounded-lg border border-border-light dark:border-border-dark text-text-on-light dark:text-text-on-dark hover:bg-primary-light/10 dark:hover:bg-primary-dark/10 transition-colors"
		>
			Cancel
		</button>
		<button
			type="submit"
			class="px-4 py-2 rounded-lg bg-accent-light dark:bg-accent-dark text-primary-light dark:text-primary-dark hover:opacity-80 transition-opacity"
		>
			Save Changes
		</button>
	</div>
}
