package templ_project

import (
	m "go-do-the-thing/src/models"
	mf "go-do-the-thing/src/models/forms"
	ts "go-do-the-thing/src/shared/templ"
)

templ ProjectListWithBody(navbar m.NavBarObject, formData mf.ProjectForm, projects []m.ProjectView) {
	@ts.Main(ProjectListPage(navbar, formData, projects))
}

templ ProjectListPage(navbar m.NavBarObject, formData mf.ProjectForm, projects []m.ProjectView) {
	@ts.NavBar(navbar)
	<div class="px-1 sm:px-[5%] xl:px-[10%] w-full text-text-on-light dark:text-text-on-dark mb-10">
		<div class="mx-auto px-4 flex pt-4 items-center justify-between mb-4">
			<p class="font-bold text-xl text-text-on-light dark:text-text-on-dark">TODO: Items</p>
			<div>
				@ts.OpenFormButton("New Task", "create-project-form-container", ts.SvgPlus())
			</div>
		</div>
		@ProjectForm("project", "Create", formData)
		@ProjectList(projects)
	</div>
}

templ ProjectList(projects []m.ProjectView) {
	<div id="project-list-container">
		for _, project := range projects {
			@ProjectCard(project)
		}
	</div>
	<script>
function flipProjectCardUpdateToBack(event, id) {
    const method = event.detail.requestConfig.verb.toUpperCase();
    if (method === "POST") {
	toggleClassForId('hidden', 'task-card-back-update-'+id)
    } else if (method === "DELETE") {
	toggleClassForId('hidden', 'task-card-back-delete-'+id)
    }
    const inner = document.getElementById('task-card-inner-' + id);
    if (!inner) return;
    inner.style.transform = 'rotateX(180deg)';
};
function flipProjectCardUpdateToFront(event, id) {
    const method = event.detail.requestConfig.verb.toUpperCase();
    const inner = document.getElementById('task-card-inner-' + id);
    if (!inner) return;
    inner.style.transform = 'rotateX(0deg)';
    inner.addEventListener('transitionend', function hideBack() {
	toggleClassForId('hidden', 'task-card-back-update-'+id);
	inner.removeEventListener('transitionend', hideBack);
    });
};
</script>
}

/*

templ ProjectList(navbar m.NavBarObject, formData mf.ProjectForm, projects []m.ProjectView) {
	@ts.NavBar(navbar)
	<div class="px-1 lg:px-[10%] w-full text-primary-900 dark:text-primary-50">
		<div class="w-[90%] mx-auto pt-5 px-5 py-5 flex items-center justify-between">
			<p class="text-xl text-primary-900 dark:text-primary-50">Goals:</p>
			<div>
				<button
					type="button"
					onclick="swapClassForId('max-h-0', 'max-h-[50rem]','create-project-form-container');swapClassForId('opacity-0', 'opacity-100','create-project-form-container');"
					class="text-action-700 hover:text-primary-50 border border-action-700 hover:bg-action-800 focus:ring-4
                        focus:outline-none focus:ring-action-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center
                        me-2 mb-2 dark:border-action-500 dark:text-action-500 dark:hover:text-primary-50 dark:hover:bg-action-600
                        dark:focus:ring-action-800 flex items-center"
				>
					Create Project
					@ts.SvgPlus()
				</button>
			</div>
		</div>
		<div
			id="create-project-form-container"
			class="w-[90%] mx-auto max-h-0 overflow-y-hidden opacity-0 transition-[max-height, opacity] duration-500 ease-in-out"
		>
			<div
				class="overflow-y-auto overflow-x-hidden z-50 mb-5 justify-center items-center bg-opacity-40 w-full md:inset-0 h-full"
			>
				<div class="relative bg-primary-50 rounded-lg shadow dark:bg-primary-700">
					<div
						class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-primary-600"
					>
						<p class="text-primary-900 text-xl dark:text-primary-50">NEW Project:</p>
						<button
							class="text-primary-900 dark:text-primary-50"
							onclick="swapClassForId('max-h-0', 'max-h-[50rem]','create-project-form-container');swapClassForId('opacity-0', 'opacity-100','create-project-form-container');"
						>
							@ts.SvgClose()
						</button>
					</div>
					@ProjectForm("project", "Create", formData)
				</div>
			</div>
		</div>
		<div class="relative items-center w-full">
			<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 w-[90%] mx-auto">
				for _, project := range projects {
					@ProjectCard(project)
				}
			</div>
			@ts.NoDataRow(true)
		</div>
	</div>
}

*/
