package templ_project

import (
	m "go-do-the-thing/src/models"
	mf "go-do-the-thing/src/models/forms"
	ts "go-do-the-thing/src/shared/templ"
)

templ ProjectListWithBody(navbar m.NavBarObject, formData mf.ProjectForm, projects []m.ProjectView) {
	@ts.Main(ProjectListPage(navbar, formData, projects))
}

templ ProjectListPage(navbar m.NavBarObject, formData mf.ProjectForm, projects []m.ProjectView) {
	@ts.NavBar(navbar)
	<div class="px-1 sm:px-[5%] xl:px-[10%] w-full text-text-on-light dark:text-text-on-dark mb-10">
		<div class="mx-auto px-4 flex pt-4 items-center justify-between mb-4">
			<p class="font-bold text-xl text-text-on-light dark:text-text-on-dark">TODO: Items</p>
			<div>
				@ts.OpenFormButton("New Task", "create-project-form-container", ts.SvgPlus())
			</div>
		</div>
		@ProjectForm("project", "Create", formData)
		@ProjectList(projects)
	</div>
}

templ ProjectList(projects []m.ProjectView) {
	<div id="project-list-container">
		for _, project := range projects {
			@ProjectCard(project)
		}
	</div>
	<script>
function flipProjectCardUpdateToBack(event, id) {
    const method = event.detail.requestConfig.verb.toUpperCase();
    if (method === "POST") {
	toggleClassForId('hidden', 'task-card-back-update-'+id)
    } else if (method === "DELETE") {
	toggleClassForId('hidden', 'task-card-back-delete-'+id)
    }
    const inner = document.getElementById('task-card-inner-' + id);
    if (!inner) return;
    inner.style.transform = 'rotateX(180deg)';
};
function flipProjectCardUpdateToFront(event, id) {
    const method = event.detail.requestConfig.verb.toUpperCase();
    const inner = document.getElementById('task-card-inner-' + id);
    if (!inner) return;
    inner.style.transform = 'rotateX(0deg)';
    inner.addEventListener('transitionend', function hideBack() {
	toggleClassForId('hidden', 'task-card-back-update-'+id);
	inner.removeEventListener('transitionend', hideBack);
    });
};
</script>
}
