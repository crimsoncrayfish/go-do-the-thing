package templ_project

import (
	m "go-do-the-thing/src/models"
	mf "go-do-the-thing/src/models/forms"
	"go-do-the-thing/src/shared/templ"
	ts "go-do-the-thing/src/shared/templ"
)

// Main project list page with lazy loading
templ ProjectListWithBody(activeScreen m.Screen) {
	@ts.Main(ProjectListPage(activeScreen))
}

templ ProjectListPage(activeScreen m.Screen) {
	@ts.NavBar(activeScreen)
	<div id="main-layout" class="grid grid-cols-[100%_0%] h-[calc(100vh-4rem)] transition-[grid-template-columns] duration-300 ease-in-out">
		<div id="main-content" class="overflow-y-auto transition-opacity duration-300 ease-in-out">
			<div class="px-1 sm:px-[5%] xl:px-[10%] w-full text-text-on-light dark:text-text-on-dark mb-10">
				<div hx-get="/projects/lazy" hx-trigger="load" hx-indicator="#loader-page" id="project-list-container"></div>
			</div>
		</div>
		@ts.EditPanel("Edit Project", projectEditContent())
	</div>
	<script>
function flipProjectCardUpdateToBack(event, id) {
    const method = event.detail.requestConfig.verb.toUpperCase();
    if (method === "GET") {
        return;
    }
    if (method === "POST") {
        toggleClassForId('hidden', 'project-card-back-update-'+id)
    } else if (method === "DELETE") {
        toggleClassForId('hidden', 'project-card-back-delete-'+id)
    }
    const inner = document.getElementById('project-card-inner-' + id);
    if (!inner) return;
    inner.style.transform = 'rotateX(180deg)';
};
function flipProjectCardUpdateToFront(event, id) {
    const method = event.detail.requestConfig.verb.toUpperCase();
    const inner = document.getElementById('project-card-inner-' + id);
    if (!inner) return;
    inner.style.transform = 'rotateX(0deg)';
    inner.addEventListener('transitionend', function hideBack() {
	toggleClassForId('hidden', 'project-card-back-update-'+id);
	toggleClassForId('hidden', 'project-card-back-delete-'+id);
	inner.removeEventListener('transitionend', hideBack);
    });
};
</script>
}

templ ProjectListContent(projects []m.ProjectView, formData mf.ProjectForm) {
	<div class="mx-auto px-4 flex pt-4 items-center justify-between mb-4">
		<p class="font-bold text-xl text-text-on-light dark:text-text-on-dark">TODO: Projects</p>
		<div>
			@ts.OpenFormButton("New Project", ts.SvgPlus())
		</div>
	</div>
	@templ_shared.FormContainer("project", ProjectFormContent(formData))
	for _, project := range projects {
		@ProjectCard(project)
	}
}

templ projectEditContent() {
	<div class="space-y-4">
		<p class="text-text-on-light dark:text-text-on-dark">Project Edit Content</p>
	</div>
}
