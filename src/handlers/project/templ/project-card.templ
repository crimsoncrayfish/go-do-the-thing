package templ_project

import (
	"fmt"
	"go-do-the-thing/src/helpers/constants"
	"go-do-the-thing/src/models"
	ts "go-do-the-thing/src/shared/templ"
	"time"
)

templ ProjectCard(project models.ProjectView) {
	<div
		id={ fmt.Sprintf("project-card-%d", project.Id) }
		class="relative [perspective:1000px] overflow-visible z-0 focus-within:z-10 transition-all mb-4"
		hx-on--after-swap={ fmt.Sprintf("flipProjectCardUpdateToFront(event, %d)", project.Id) }
		hx-on--before-request={ fmt.Sprintf("flipProjectCardUpdateToBack(event, %d)", project.Id) }
		hx-on--after-request.from="closest button"
	>
		<div class="task-card-slide-wrapper">
			<div
				id={ fmt.Sprintf("project-card-inner-%d", project.Id) }
				class="task-card-child w-full transition-transform duration-500 relative [transform-style:preserve-3d]"
			>
				@ProjectCardFront(project)
				@ProjectCardBack(project)
			</div>
		</div>
	</div>
}

templ ProjectCardFront(project models.ProjectView) {
	<div
		id={ fmt.Sprintf("project-card-front-%d", project.Id) }
		class={ getProjectBorderStyle(project), getProjectThemingStyles(project) }
	>
		@projectStatus(project)
		@projectDetails(project)
		@projectActions(project)
	</div>
}

templ projectStatus(project models.ProjectView) {
	<div class="hidden sm:flex pr-8 pl-4 items-center justify-center">
		@projectStatusIcon(project)
	</div>
}

templ projectDetails(project models.ProjectView) {
	<div class="sm:px-4 flex flex-col w-full justify-around space-y-4 pb-4 sm:pb-0 sm:border-x border-border-light dark:border-border-dark">
		<div class="flex flex-row items-start justify-between">
			@projectStatusChip(project)
			<span class="text-sm text-text-on-light dark:text-text-on-dark">
				Due: { project.DueDate.Format(constants.DateFormat) }
			</span>
		</div>
		<div class="flex flex-col-reverse md:flex-row md:justify-between md:items-center">
			<p class="font-bold text-lg md:mb-0">{ project.Name }</p>
			<div class="flex items-center space-x-2">
				<span class="text-sm text-text-on-light dark:text-text-on-dark">Owner: { project.Owner.FullName }</span>
			</div>
		</div>
		if (project.Description != "") {
			<div class="text-text-on-light dark:text-text-on-dark text-sm whitespace-pre-line line-clamp-3">
				{ project.Description }
			</div>
		}
	</div>
}

templ projectStatusChip(project models.ProjectView) {
	if project.IsDeleted {
		<span class="bg-danger-light dark:bg-danger-dark text-white text-xs font-bold py-1 px-3 rounded-full shadow-sm mb-1 sm:mb-0">
			Deleted
		</span>
	} else if project.IsComplete {
		<span class="bg-success-light dark:bg-success-dark text-text-on-light dark:text-text-on-dark text-xs font-bold py-1 px-3 rounded-full shadow-sm mb-1 sm:mb-0">
			Complete
		</span>
	} else if project.DueDate.Before(time.Now()) {
		<span class="bg-danger-light dark:bg-danger-dark text-white text-xs font-bold py-1 px-3 rounded-full shadow-sm mb-1 sm:mb-0">
			Over Due
		</span>
	} else {
		<span class="bg-primary-light dark:bg-primary-dark text-text-on-light dark:text-text-on-dark text-xs font-bold py-1 px-3 rounded-full shadow-sm mb-1 sm:mb-0">
			In Progress
		</span>
	}
}

templ projectActions(project models.ProjectView) {
	<div class="flex sm:pl-8 pr-4 items-center space-x-4 sm:space-x-0 lg:space-x-4 sm:space-y-4 lg:space-y-0 justify-start sm:justify-center lg:justify-end sm:flex-col lg:flex-row">
		<button
			class={ "theme-transition bg-danger-light dark:bg-danger-dark hover:opacity-80 text-white font-bold p-2 rounded-full shadow-md focus:outline-none focus:ring-2 focus:ring-danger-light dark:focus:ring-danger-dark focus:ring-opacity-50 flex items-center justify-center",
				templ.KV("opacity-50", project.IsDeleted) }
			if !project.IsDeleted {
				hx-swap="outerHTML swap:0.8s"
				hx-target={ fmt.Sprintf("#project-card-front-%d", project.Id) }
				hx-delete={ fmt.Sprintf("/project/%d", project.Id) }
			}
			aria-label="Delete Project"
			if project.IsDeleted {
				disabled
			}
		>
			@ts.SvgBin()
		</button>
	</div>
}

templ ProjectCardBack(project models.ProjectView) {
	<div
		id={ fmt.Sprintf("project-card-back-delete-%d", project.Id) }
		class="hidden absolute inset-0 bg-danger-light dark:bg-danger-dark rounded-xl p-6 shadow-lg flex flex-col items-center justify-center [backface-visibility:hidden] [transform:rotateX(180deg)]"
	>
		@ts.LoaderSmall()
		<span class="mt-4 text-white text-lg font-semibold">
			Deleting "{ project.Name }"
		</span>
	</div>
}

func getProjectBorderStyle(project models.ProjectView) string {
	if project.IsDeleted {
		return "shadow-lg opacity-50 border-danger-light dark:border-danger-dark"
	}
	if project.IsComplete {
		return "shadow-lg opacity-50 border-border-light dark:border-border-dark"
	}
	if project.DueDate.Before(time.Now()) {
		return "border-danger-light dark:border-danger-dark"
	}
	return "border-border-light dark:border-border-dark"
}

func getProjectThemingStyles(project models.ProjectView) string {
	if project.IsDeleted {
		return "theme-transition bg-secondary-light dark:bg-secondary-dark rounded-xl p-4 border border-danger-light dark:border-danger-dark shadow-lg flex flex-col sm:flex-row opacity-50"
	}
	return "theme-transition bg-secondary-light dark:bg-secondary-dark rounded-xl p-4 border border-border-light dark:border-border-dark shadow-lg flex flex-col sm:flex-row"
}

templ projectStatusIcon(project models.ProjectView) {
	<div
		if project.IsComplete {
			class="text-action-400"
		}
		else
		if project.DueDate.Before(time.Now()) {
			class="text-error"
		} else {
			class="text-warn"
		}
	>
		if project.IsComplete {
			@ts.SvgCheck()
		} else {
			@ts.SvgWait()
		}
	</div>
}

templ ProjectCardOOB(project models.ProjectView) {
	<div id="project-list-container" hx-swap-oob="afterbegin">
		@ProjectCard(project)
	</div>
}
