package templ_todo

import (
	"fmt"
	"go-do-the-thing/src/helpers/constants"
	"go-do-the-thing/src/models"
	fm "go-do-the-thing/src/models/forms"
	"go-do-the-thing/src/shared/templ"
	ts "go-do-the-thing/src/shared/templ"
	"time"
)

templ TaskItemWithBody(
	task *models.TaskView,
	navbar models.NavBarObject,
	formdata fm.TaskForm,
	projects map[int64]string) {
	@templ_shared.Main(TaskItem(task, navbar, formdata, projects))
}

templ TaskItem(task *models.TaskView, navbar models.NavBarObject, formdata fm.TaskForm, projects map[int64]string) {
	@ts.NavBar(navbar)
	<div class="px-1 my-4 sm:px-[5%] xl:px-[10%] w-full text-text-on-light dark:text-text-on-dark mb-10">
		@TaskItemContent(task, projects)
		@taskTimeline(task)
	</div>
	@taskCommentBox(task)
}

templ TaskItemContent(task *models.TaskView, projects map[int64]string) {
	<div id="task-content" class="theme-transition bg-secondary-light dark:bg-secondary-dark rounded-xl p-4 mb-6 border border-border-light dark:border-border-dark shadow-lg">
		@taskHeader(task)
		@taskForm(task, projects, map[string]string{}, false)
	</div>
}

templ TaskItemContentOOBTargetList(task *models.TaskView, projects map[int64]string) {
	<div
		class="theme-transition bg-secondary-light dark:bg-secondary-dark rounded-xl p-4 mb-6 border border-border-light dark:border-border-dark shadow-lg"
	>
		@taskHeader(task)
		@taskForm(task, projects, map[string]string{}, false)
	</div>
}

templ TaskItemContentOOB(task *models.TaskView, projects map[int64]string) {
	@TaskItemContentWithErrors(task, projects, map[string]string{}, false)
}

templ TaskItemContentWithErrors(task *models.TaskView, projects map[int64]string, errors map[string]string, is_editing bool) {
	<div id="task-content" hx-swap-oob="true" hx-target="#task-content" class="theme-transition bg-secondary-light dark:bg-secondary-dark rounded-xl p-4 mb-6 border border-border-light dark:border-border-dark shadow-lg">
		@taskHeader(task)
		@taskForm(task, projects, errors, is_editing)
	</div>
}

templ taskForm(task *models.TaskView, projects map[int64]string, errors map[string]string, is_editing bool) {
	<form
		hx-target="#edit-panel-content"
		hx-swap="innerHTML"
		hx-post={ fmt.Sprintf("/todo/item/%d", task.Id) }
		hx-indicator="#edit-panel-loader"
	>
		@taskTitleAndTimer(task, projects, is_editing)
		<hr class="h-px my-8 border-0 bg-border-light dark:border-border-dark "/>
		@taskDetails(task, is_editing)
		@editActions(is_editing)
		<div
			id="task-edit-errors"
			class={ templ.KV("hidden", !is_editing) }
		>
			for _, v:= range errors {
				<div class="text-danger-light dark:text-danger-dark">
					{ v }
				</div>
			}
		</div>
	</form>
}

templ taskHeader(task *models.TaskView) {
	<div class="flex justify-between items-start mb-4">
		<div class="flex items-center gap-3">
			@taskStatusChip(task)
		</div>
		<div class="flex gap-2">
			if (task.InProgress) {
				<button class="theme-transition bg-warning-light dark:bg-warning-dark hover:opacity-80 text-primary-light dark:text-primary-dark rounded-full font-medium transition-all px-2 py-2 md:px-4 md:py-2 flex items-center gap-2">
					@templ_shared.SvgPause()
					<span class="hidden md:inline">Pause</span>
				</button>
			} else {
				<button class="theme-transition bg-warning-light dark:bg-warning-dark hover:opacity-80 text-primary-light dark:text-primary-dark rounded-full font-medium transition-all px-2 py-2 md:px-4 md:py-2 flex items-center gap-2">
					@templ_shared.SvgPlay()
					<span class="hidden md:inline">Start</span>
				</button>
			}
			if (task.Status != models.Completed) {
				<button
					hx-swap="outerHTML"
					hx-target="#task-content"
					hx-post={ fmt.Sprintf("/todo/item/status/%d?source=task_page", task.Id) }
					class="theme-transition bg-success-light dark:bg-success-dark hover:opacity-80 text-white rounded-full font-medium transition-all px-2 py-2 md:px-4 md:py-2 flex items-center gap-2"
				>
					@templ_shared.SvgCheck()
					<span class="hidden md:inline">Mark as Complete</span>
				</button>
			} else {
				<button
					hx-swap="outerHTML"
					hx-target="#task-content"
					hx-post={ fmt.Sprintf("/todo/item/status/%d?source=task_page", task.Id) }
					class="theme-transition bg-danger-light dark:bg-danger-dark hover:opacity-80 text-white rounded-full font-medium transition-all px-2 py-2 md:px-4 md:py-2 flex items-center gap-2"
				>
					@templ_shared.SvgClose()
					<span class="hidden md:inline">Mark as Incomplete</span>
				</button>
			}
			@editDeleteMenuItemPage(task, editFromTask())
		</div>
	</div>
}

templ editDeleteMenuItemPage(task *models.TaskView, editButton templ.Component) {
	<div tabindex="0" class="relative group">
		<button
			if (task.Status == models.Completed) {
				disabled
			}
			aria-haspopup="true"
			aria-expanded="false"
			class="theme-transition bg-primary-light dark:bg-primary-dark
             hover:opacity-80 text-text-on-light dark:text-text-on-dark
             font-bold p-2 rounded-full shadow-md focus:outline-none
             focus:ring-2 focus:ring-text-light dark:focus:ring-text-dark
             focus:ring-opacity-50 flex items-center justify-center"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				class="h-6 w-6"
				fill="none"
				viewBox="0 0 24 24"
				stroke="currentColor"
				stroke-width="2"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					d="M12 6v.01M12 12v.01M12 18v.01"
				></path>
			</svg>
			<span class="sr-only">Open task actions</span>
		</button>
		<div
			class={ templ.KV( "hidden" , task.Status == models.Completed),
			"origin-top-right absolute right-0  mt-2 w-40 rounded-md",
			"border-primary-light dark:border-primary-dark",
			"shadow-lg bg-primary-light dark:bg-primary-dark ring-1 ring-black",
			"ring-opacity-5 opacity-0 invisible group-focus-within:opacity-100",
			"group-focus-within:visible transition-all z-50" }
		>
			<ul class="py-1 w-full">
				<li class="w-full">
					@editButton
				</li>
				<li>
					<button
						class="w-full text-left px-4 py-2 text-sm
					text-danger-light dark:text-danger-dark font-bold
					hover:bg-secondary-light dark:hover:bg-secondary-dark flex items-center"
						aria-label="Delete Task"
					>
						@templ_shared.SvgBin()
						<p class="pl-4">Delete</p>
					</button>
				</li>
			</ul>
		</div>
	</div>
}

templ taskTitleAndTimer(task *models.TaskView, projects map[int64]string, is_editing bool) {
	<div class="mb-6">
		<div class="flex flex-col md:flex-row md:items-center justify-between mb-6">
			<div class="flex flex-row items-center">
				@statusIcon(task)
				<p
					id="task-title-view"
					class={ templ.KV("hidden",is_editing), "text-text-on-ligh dark:text-text-on-dark text-2xl ml-2 font-bold" }
				>
					{ task.Name }
				</p>
				<input
					type="text"
					name="name"
					id="task-title-edit"
					class={ templ.KV("hidden",!is_editing), "ml-2 w-full bg-primary-light dark:bg-primary-dark border border-border-light dark:border-border-dark rounded-lg px-4 py-2 text-2xl font-bold text-text-on-light dark:text-text-on-dark" }
					value={ task.Name }
				/>
			</div>
			<div class="flex flex-row items-center">
				<div class="float-end pr-2">
					@templ_shared.SvgTag(task.ProjectId)
				</div>
				<p
					hx-get={ fmt.Sprintf("/project/%d", task.ProjectId) }
					hx-replace-url="true"
					hx-target="body"
					id="task-project-view"
					class={ templ.KV("hidden",is_editing), "cursor-pointer hover:text-link dark:hover:text-link hover:underline text-xl text-text-on-light dark:text-text-on-dark" }
				>
					{ task.ProjectName }
				</p>
				<div id="task-project-edit" class={ templ.KV("hidden", !is_editing) }>
					@templ_shared.FormListInput("", "project", task.ProjectId, projects)
				</div>
			</div>
		</div>
		<div class="mb-4">
			<div class="text-text-on-light dark:text-text-on-dark text-sm">Time Elapsed</div>
			<div id="detail-timer" class="text-text-on-ligh dark:text-text-on-dark text-xl font-semibold">02:37:05</div>
		</div>
	</div>
}

templ taskDetails(task *models.TaskView, is_editing bool) {
	<div class="flex flex-col md:flex-row">
		<div class="md:w-2/3 md:pr-6">
			<div class="mb-6">
				<h2 class="text-sm font-medium text-text-on-light/70 dark:text-text-on-dark/70 mb-2">Description</h2>
				<div
					id="task-description-view"
					class={ templ.KV("hidden",is_editing), "text-text-on-light dark:text-text-on-dark whitespace-pre-line" }
				>
					if len(task.Description) > 0 {
						{ task.Description }
					} else {
						...
					}
				</div>
				<textarea name="description" id="task-description-edit" class={ templ.KV("hidden",!is_editing), " w-full bg-primary-light dark:bg-primary-dark border border-border-light dark:border-border-dark rounded-lg px-4 py-2 text-text-on-light dark:text-text-on-dark min-h-[100px]" }>{ task.Description }</textarea>
			</div>
		</div>
		<div class="md:w-1/3 space-y-4 mt-4 md:mt-0 text-left md:text-right">
			<div>
				<h3 class="text-sm font-medium text-text-on-light/70 dark:text-text-on-dark/70 mb-1">Due Date</h3>
				<p id="task-due-date-view" class={ templ.KV("hidden",is_editing), "text-text-on-light dark:text-text-on-dark" }>{ task.DueDate.Format(constants.PrettyDateFormat) }</p>
				<div id="task-due-date-edit" class={ templ.KV("hidden", !is_editing) }>
					<div class="mt-2 relative">
						<div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
							<svg
								class="w-4 h-4 text-text-on-light dark:text-text-on-dark"
								aria-hidden="true"
								xmlns="http://www.w3.org/2000/svg"
								fill="currentColor"
								viewBox="0 0 20 20"
							>
								<path
									d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"
								></path>
							</svg>
						</div>
						<input
							type="text"
							name="due_date"
							value={ task.DueDate.Format(constants.DateFormat) }
							placeholder="Due Date"
							id="datepicker-format"
							datepicker
							datepicker-format="yyyy-mm-dd"
							class={ "border border-border-light text-text-on-light text-sm rounded-lg block w-full ps-10 p-2.5",
							"bg-primary-light dark:bg-primary-dark dark:border-border-dark",
							"dark:placeholder-accent-dark placeholder-accent-light",
							"dark:text-text-on-dark focus:ring-accent-light focus:border-border-light dark:focus:ring-accent-dark dark:focus:border-border-dark" }
						/>
					</div>
				</div>
			</div>
			<div>
				<h3 class="text-sm font-medium text-text-on-light/70 dark:text-text-on-dark/70 mb-1">Created By</h3>
				<p class="text-text-on-light dark:text-text-on-dark">{ task.CreatedBy.FullName }</p>
			</div>
			<div>
				<h3 class="text-sm font-medium text-text-on-light/70 dark:text-text-on-dark/70 mb-1">Created</h3>
				<p class="text-text-on-light dark:text-text-on-dark">{ task.CreatedDate.Format(constants.PrettyDateFormat) }</p>
			</div>
		</div>
	</div>
}

templ editActions(is_editing bool) {
	<script>
        function toggleEdit() {
            toggleClassForId('hidden','task-title-view');
            toggleClassForId('hidden','task-description-view');
            toggleClassForId('hidden','task-due-date-view');
            toggleClassForId('hidden','task-project-view');

            toggleClassForId('hidden','task-title-edit');
            toggleClassForId('hidden','task-description-edit');
            toggleClassForId('hidden','task-due-date-edit');
            toggleClassForId('hidden','task-project-edit');

            toggleClassForId('hidden','edit-actions');
            toggleClassForId('hidden','task-edit-errors');

            toggleClassForId('hidden','task-options-menu');
    }
	</script>
	<div id="edit-actions" class={ templ.KV("hidden",!is_editing), "mt-6 flex justify-end gap-2" }>
		<button
			type="button"
			onclick="toggleEdit()"
			class="px-4 py-2 rounded-lg border border-border-light dark:border-border-dark text-text-on-light dark:text-text-on-dark hover:bg-primary-light/10 dark:hover:bg-primary-dark/10 transition-colors"
		>
			Cancel
		</button>
		<button
			type="submit"
			class="px-4 py-2 rounded-lg bg-accent-light dark:bg-accent-dark text-primary-light dark:text-primary-dark hover:opacity-80 transition-opacity"
		>
			Save Changes
		</button>
	</div>
}

templ editFromTask() {
	<button
		class={ " w-full text-left px-4 py-2 text-sm",
								"text-text-on-light dark:text-text-on-dark",
								"hover:bg-secondary-light dark:hover:bg-secondary-dark flex items-center" }
		aria-label="Edit Task"
		onclick="toggleEdit()"
	>
		@templ_shared.SvgEdit()
		<p class="pl-4">Edit</p>
	</button>
}

templ taskCommentBox(task *models.TaskView) {
	<div id="comment-fab-container" class="fixed bottom-6 right-6 z-50">
		<button
			id="comment-fab-button"
			class="theme-transition bg-accent-light dark:bg-accent-dark text-primary-light dark:text-primary-dark rounded-full p-4 shadow-lg hover:opacity-80 transition-opacity focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50"
			onclick="toggleClassForId('hidden','comment-area')"
			aria-label="Add Comment"
		>
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
				<path stroke-linecap="round" stroke-linejoin="round" d="M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 0 1 .865-.501 48.172 48.172 0 0 0 3.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z"></path>
			</svg>
		</button>
		<div
			id="comment-area"
			class="hidden absolute bottom-0 right-0 mb-16 w-80 theme-transition bg-secondary-light dark:bg-secondary-dark rounded-xl shadow-lg border border-accent-light dark:border-accent-dark p-4"
		>
			<div class="flex justify-between items-center mb-3">
				<h3 class="text-lg font-bold text-text-on-light dark:text-text-on-dark">Add Comment</h3>
				<button
					class="text-text-on-light dark:text-text-on-dark hover:opacity-80 transition-opacity"
					onclick="toggleClassForId('hidden','comment-area')"
					aria-label="Close Comment Area"
				>
					@templ_shared.SvgClose()
				</button>
			</div>
			<form>
				<textarea
					id="comment-textarea"
					name="comment"
					placeholder="Add a comment..."
					class="theme-transition bg-primary-light dark:bg-primary-dark text-text-on-light dark:text-text-on-dark rounded-lg py-2 px-3 w-full focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50 shadow-sm border border-border-light dark:border-border-dark min-h-[80px]"
				></textarea>
				<div class="flex justify-end mt-3">
					<button
						type="submit"
						class="theme-transition bg-accent-light dark:bg-accent-dark hover:opacity-80 text-white font-bold py-2 px-4 rounded-full shadow-md focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50"
					>
						Post Comment
					</button>
				</div>
			</form>
		</div>
	</div>
}

templ taskTimeline(task *models.TaskView) {
	<div class="theme-transition bg-secondary-light dark:bg-secondary-dark rounded-xl p-6 mb-6 border border-border-light dark:border-border-dark shadow-lg">
		<h2 class="text-xl font-bold mb-4">Timeline</h2>
		<div class="relative space-y-6">
			<div class="absolute left-[15px] top-0 bottom-0 w-[3px] bg-border-light dark:bg-border-dark "></div>
			<div class="relative flex gap-4">
				<div class="flex-shrink-0 relative z-10 ">
					<div class="h-8 w-8 rounded-full bg-accent-light dark:bg-accent-dark  flex items-center justify-center">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-primary-light dark:text-primary-dark ">
							<path stroke-linecap="round" stroke-linejoin="round" d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.348a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653z"></path>
						</svg>
					</div>
				</div>
				<div class="flex-grow">
					<div class="flex justify-between items-start">
						<div>
							<h3 class="font-medium">Started task</h3>
							<p class="text-sm text-text-light dark:text-text-dark ">Task timer started</p>
						</div>
						<time class="text-sm text-text-light/70 dark:text-text-dark/70">Apr 20, 2025 - 5:49 PM</time>
					</div>
				</div>
			</div>
			<div class="relative flex gap-4">
				<div class="flex-shrink-0 relative z-10">
					<div class="h-8 w-8 rounded-full bg-text-light dark:bg-text-dark  flex items-center justify-center">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-primary-light dark:text-primary-dark ">
							<path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125"></path>
						</svg>
					</div>
				</div>
				<div class="flex-grow">
					<div class="flex justify-between items-start">
						<div>
							<h3 class="font-medium">Updated task</h3>
						</div>
						<time class="text-sm text-text-light/70 dark:text-text-dark/70">Apr 20, 2025 - 8:30 PM</time>
					</div>
					<div class="theme-transition bg-primary-light dark:bg-primary-dark  rounded-lg p-4 border border-border-light dark:border-border-dark  mt-2 space-y-2">
						<div class="flex items-center gap-2 text-sm text-text-light dark:text-text-dark ">
							<span class="font-medium">Due Date:</span>
							<span class="line-through">Apr 23, 2025</span>
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-text-light/70 dark:text-text-dark/70">
								<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3"></path>
							</svg>
							<span>Apr 25, 2025</span>
						</div>
						<div class="flex items-center gap-2 text-sm text-text-light dark:text-text-dark ">
							<span class="font-medium">Project:</span>
							<span class="line-through">Project B</span>
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-text-light/70 dark:text-text-dark/70">
								<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3"></path>
							</svg>
							<span>Project A</span>
						</div>
					</div>
				</div>
			</div>
			<div class="relative flex gap-4">
				<div class="flex-shrink-0 relative z-10">
					<div class="h-8 w-8 rounded-full bg-warning-light dark:bg-warning-dark flex items-center justify-center">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-primary-light dark:text-primary-dark">
							<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 5.25v13.5m-7.5-13.5v13.5"></path>
						</svg>
					</div>
				</div>
				<div class="flex-grow">
					<div class="flex justify-between items-start">
						<div>
							<h3 class="font-medium">Paused task</h3>
							<p class="text-sm text-text-light dark:text-text-dark ">Task paused for 15 minutes</p>
						</div>
						<time class="text-sm text-text-light/70 dark:text-text-dark/70">Apr 20, 2025 - 6:30 PM</time>
					</div>
				</div>
			</div>
			<div class="relative flex gap-4">
				<div class="flex-shrink-0 relative z-10">
					<div class="h-8 w-8 rounded-full bg-accent-light dark:bg-accent-dark  flex items-center justify-center">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-primary-light dark:text-primary-dark">
							<path stroke-linecap="round" stroke-linejoin="round" d="M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.348a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653z"></path>
						</svg>
					</div>
				</div>
				<div class="flex-grow">
					<div class="flex justify-between items-start">
						<div>
							<h3 class="font-medium">Resumed task</h3>
							<p class="text-sm text-text-light dark:text-text-dark ">Task timer resumed</p>
						</div>
						<time class="text-sm text-text-light/70 dark:text-text-dark/70">Apr 20, 2025 - 6:45 PM</time>
					</div>
				</div>
			</div>
			<div class="relative flex gap-4">
				<div class="flex-shrink-0 relative z-10 bg-secondary-light dark:bg-secondary-dark">
					<div class="h-8 w-8 rounded-full bg-text-light dark:bg-text-dark  flex items-center justify-center">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-primary-light dark:text-primary-dark ">
							<path stroke-linecap="round" stroke-linejoin="round" d="M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 0 1 .865-.501 48.172 48.172 0 0 0 3.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z"></path>
						</svg>
					</div>
				</div>
				<div class="flex-grow">
					<div class="flex justify-between items-start">
						<div>
							<h3 class="font-medium">Added comment</h3>
						</div>
						<time class="text-sm text-text-light/70 dark:text-text-dark/70">Apr 20, 2025 - 7:15 PM</time>
					</div>
					<div class="theme-transition bg-primary-light dark:bg-primary-dark  rounded-lg p-4 border border-border-light dark:border-border-dark  mt-2">
						<div class="flex items-start gap-3">
							<div class="flex-shrink-0">
								<div class="group relative">
									<div class="h-8 w-8 rounded-full bg-accent-light dark:bg-accent-dark  flex items-center justify-center text-primary-light dark:text-primary-dark  font-medium cursor-pointer">
										M
									</div>
									<div class="absolute -top-8 left-1/2 -translate-x-1/2 px-2 py-1 bg-secondary-light dark:bg-secondary-dark  border border-border-light dark:border-border-dark  rounded text-xs text-text-light dark:text-text-dark  whitespace-nowrap opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all">
										Marco
									</div>
								</div>
							</div>
							<p class="text-sm text-text-light dark:text-text-dark ">
								Completed the initial component design. Need to review with the team tomorrow.
							</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ statusIcon(task *models.TaskView) {
	<div
		if task.Status==models.Completed {
			class="text-success-light dark:text-success-dark"
		}
		else
		if task.DueDate.Before(time.Now()) {
			class="text-danger-light dark:text-danger-dark"
		} else {
			class="text-warning-light dark:text-warning-dark"
		}
	>
		if task.Status == models.Completed {
			@templ_shared.SvgCheck()
		} else {
			@templ_shared.SvgWait()
		}
	</div>
}
