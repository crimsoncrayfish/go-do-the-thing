package templ_todo

import (
	"fmt"
	"go-do-the-thing/src/helpers/constants"
	"go-do-the-thing/src/models"
	fm "go-do-the-thing/src/models/forms"
	"go-do-the-thing/src/shared/templ"
	ts "go-do-the-thing/src/shared/templ"
)

templ TaskItemWithBody(
	task *models.TaskView,
	navbar models.NavBarObject,
	formdata fm.TaskForm,
	projects map[int64]string) {
	<!DOCTYPE html>
	<html lang="en">
		@ts.Header()
		<body id="main-body" class="bg-primary-50 dark:bg-primary-900 antialiased">
			@TaskItem(task, navbar, formdata, projects)
		</body>
	</html>
}

templ TaskItem(task *models.TaskView, navbar models.NavBarObject, formdata fm.TaskForm, projects map[int64]string) {
	@ts.NavBar(navbar)
	@ts.Loader()
	<div id="item-view" class="w-full lg:w-[80%] m-auto px-1 lg:px-[10%] pt-5 text-text-on-light dark:text-text-on-dark">
		<div class="flex w-full justify-between items-center">
			<div class="flex items-center">
				<button
					hx-get="/todo/items"
					hx-replace-url="true"
					hx-target="body"
					class="mr-5 font-medium rounded-lg text-sm px-5 py-2.5 text-center
				border-success-light text-success-light hover:text-text-on-dark hover:bg-success-light
				dark:border-success-light dark:text-success-dark dark:hover:text-text-on-light dark:hover:bg-success-dark
				focus:ring-success-light dark:focus:ring-success-dark
				flex items-center"
				>
					@ts.SvgBack()
					Back
				</button>
			</div>
			@ts.EditButton("edit-task-form-container")
		</div>
		<div
			id="edit-task-form-container"
			class=" max-h-0 opacity-0 transition-[opacity, max-height] pt-2 duration-500 ease-in-out"
		>
			<div
				class="overflow-y-auto overflow-x-hidden z-50 justify-center items-center bg-opacity-40 w-full md:inset-0 max-h-full"
			>
				<div class="relative bg-primary-50 rounded-lg shadow dark:bg-primary-700">
					<div
						class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-primary-600"
					>
						<p class="text-primary-900 text-xl dark:text-primary-50">TODO:</p>
						<button
							class="text-primary-900 dark:text-primary-50"
							onclick="swapClassForId('max-h-0', 'max-h-[50rem]','edit-task-form-container');swapClassForId('opacity-0', 'opacity-100','edit-task-form-container');"
						>
							@ts.SvgClose()
						</button>
					</div>
					@TaskForm(fmt.Sprintf("/todo/item/%d", task.Id), "Update", formdata, projects)
				</div>
			</div>
		</div>
		@taskItemContent(task)
	</div>
}

templ taskItemContent(task *models.TaskView) {
	<div id="task-item-content">
		<div
			class="overflow-y-auto overflow-x-hidden mt-2 z-50 justify-center items-center bg-opacity-40 w-full md:inset-0 max-h-full"
		>
			<div class="relative bg-primary-50 shadow dark:bg-primary-700">
				<div
					class="flex items-center justify-between p-4 md:p-5 border-b rounded-lg rounded-t dark:border-primary-600"
				>
					<div class="sm:flex w-full sm:justify-between items-center">
						<div class="float-start">
							<div class="flex items-center">
								@statusIcon(task)
								<div class="mx-4 text-xl ">
									if len(task.Name) > 0 {
										{ task.Name }
									} else {
										{ task.Description }
									}
								</div>
							</div>
							if task.Status == models.Completed {
								<div class="text-sm">
									Completed on: { task.CompletedDate.String() }
								</div>
							}
						</div>
						<div class="float-end">
							<div class="flex items-center space-x-2">
								<span>{ task.ProjectName }</span>
								@templ_shared.SvgTag(task.ProjectId)
							</div>
						</div>
					</div>
				</div>
			</div>
			<div
				class="p-4 bg-transparent border-b dark:border-primary-600 divide-primary-900 dark:divide-primary-600"
			>
				if len(task.Name) > 0 {
					{ task.Description }
				}
				<div class="sm:flex w-full sm:justify-between items-center">
					<p>Assigned To: { task.AssignedTo.FullName }</p>
					<p class="pt-2 sm:p-0">Due on: { task.DueDate.Format(constants.DateFormat) }</p>
				</div>
				<div>Created by: { task.CreatedBy.FullName }</div>
				<div>Created on: { task.CreatedDate.String() }</div>
			</div>
		</div>
	</div>
}

templ TaskItemContentOOB(task *models.TaskView) {
	<div id="task-item-content" hx-swap-oob="true">
		@taskItemContent(task)
	</div>
}
