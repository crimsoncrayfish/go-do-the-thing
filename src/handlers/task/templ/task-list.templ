package templ_todo

import (
	m "go-do-the-thing/src/models"
	mf "go-do-the-thing/src/models/forms"
	"go-do-the-thing/src/shared/templ"
	ts "go-do-the-thing/src/shared/templ"
)

// Main task list page with lazy loading
templ TaskListWithBody(activeScreen m.Screen, formdata mf.TaskForm, projects map[int64]string) {
	@ts.Main(TaskListPage(activeScreen, formdata, projects))
}

templ TaskListPage(activeScreen m.Screen, formdata mf.TaskForm, projects map[int64]string) {
	@ts.NavBar(activeScreen)
	<div
		id="main-layout"
		class="grid grid-cols-[100%_0%] h-[calc(100vh-5rem)] transition-[grid-template-columns] duration-300 ease-in-out overflow-hidden @container"
	>
		<div
			id="main-content"
			class="overflow-y-auto h-[calc(100vh-5rem)] transition-opacity duration-300 ease-in-out @container"
		>
			<div class="px-1 sm:px-[5%] xl:px-[10%] w-full text-text-on-light dark:text-text-on-dark mb-10">
				<div class="mx-auto px-4 flex pt-4 items-center justify-between mb-4">
					<p class="font-bold text-xl text-text-on-light dark:text-text-on-dark">TODO: Tasks</p>
					<div>
						<button
							hx-get="/todo/item/create/panel"
							hx-target="#edit-panel"
							hx-swap="outerHTML"
							hx-indicator="#edit-panel-loader"
							onclick="openEditPanel()"
							class="bg-success-light dark:bg-success-dark hover:opacity-80 text-text-on-light dark:text-white font-bold py-2 px-4 rounded-full shadow-md focus:outline-none focus:ring-2 focus:ring-success-dark focus:ring-opacity-50 flex items-center"
						>
							@ts.SvgPlus()
							&nbsp;New Task
						</button>
					</div>
				</div>
				@searchBar(projects)
				<div hx-get="/tasks/lazy" hx-trigger="load" hx-indicator="#loader-page" id="task-list-container"></div>
			</div>
		</div>
		@ts.EditPanel("Edit Task", taskEditContent())
	</div>
	<script>
function flipTaskCardUpdateToBack(event, id) {
    const method = event.detail.requestConfig.verb.toUpperCase();
    if (method === "GET") {
        return
    }
    if (method === "POST") {
	toggleClassForId('hidden', 'task-card-back-update-'+id)
    } else if (method === "DELETE") {
	toggleClassForId('hidden', 'task-card-back-delete-'+id)
    }
    const inner = document.getElementById('task-card-inner-' + id);
    if (!inner) return;
    inner.style.transform = 'rotateX(180deg)';
};
function flipTaskCardUpdateToFront(event, id) {
    const method = event.detail.requestConfig.verb.toUpperCase();
    if (method === "GET") {
        return
    }
    const inner = document.getElementById('task-card-inner-' + id);
    if (!inner) return;
    inner.style.transform = 'rotateX(0deg)';
    inner.addEventListener('transitionend', function hideBack() {
        addClassForId('hidden', 'task-card-back-update-'+id);
	addClassForId('hidden', 'task-card-back-delete-'+id);
	inner.removeEventListener('transitionend', hideBack);
    });
};
	</script>
}

templ TaskListContent(tasks []*m.TaskView) {
	for _, task := range tasks {
		@TaskItemCard(task)
	}
}

templ searchBar(projects map[int64]string) {
	<div class="bg-secondary-light dark:bg-secondary-dark mb-4 pb-4 px-4 pt-2 border border-border-light dark:border-border-dark rounded-lg">
		<form
			hx-get="/tasks"
			hx-trigger="submit, keyup delay:500ms changed"
			hx-target="#task-list"
			hx-swap="innerHTML"
			class="grid grid-cols-1 md:grid-cols-3 gap-4"
		>
			@templ_shared.FormTextInput("", "Search", "Search...", "")
			@templ_shared.FormListInputWithAllOption("", "Project", 0, projects)
			@templ_shared.FormTextInput("", "Tag", "Tags comma separated...", "")
		</form>
		<div class="flex flex-wrap gap-2 pt-2">
			<button class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark text-sm font-medium py-2 px-4 rounded-full focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50 border border-border-light dark:border-border-dark shadow-md">
				All
			</button>
			<button class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark text-sm font-medium py-2 px-4 rounded-full focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50 border border-border-light dark:border-border-dark shadow-md">
				Completed
			</button>
			<button class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark text-sm font-medium py-2 px-4 rounded-full focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50 border border-border-light dark:border-border-dark shadow-md">
				Incomplete
			</button>
			<button class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark text-sm font-medium py-2 px-4 rounded-full focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50 border border-border-light dark:border-border-dark shadow-md">
				Overdue
			</button>
		</div>
	</div>
}

templ taskEditContent() {
	<div class="space-y-4">
		<p class="text-text-on-light dark:text-text-on-dark">Task Edit Content</p>
	</div>
}
