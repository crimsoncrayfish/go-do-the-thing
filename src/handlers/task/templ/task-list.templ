package templ_todo

import (
	m "go-do-the-thing/src/models"
	mf "go-do-the-thing/src/models/forms"
	"go-do-the-thing/src/shared/templ"
	ts "go-do-the-thing/src/shared/templ"
)

templ TaskListWithBody(navbar m.NavBarObject, formdata mf.TaskForm, tasks []*m.TaskView, projects map[int64]string) {
	@ts.Main(TaskListPage(navbar, formdata, tasks, projects))
}

templ TaskListPage(navbar m.NavBarObject, formdata mf.TaskForm, tasks []*m.TaskView, projects map[int64]string) {
	@ts.NavBar(navbar)
	<div class="px-1 sm:px-[5%] xl:px-[10%] w-full text-text-on-light dark:text-text-on-dark mb-10">
		<div class="mx-auto px-4 flex pt-4 items-center justify-between mb-4">
			<p class="font-bold text-xl text-text-on-light dark:text-text-on-dark">TODO: Items</p>
			<div>
				@ts.OpenFormButton("New Task", "create-task-form-container", ts.SvgPlus())
			</div>
		</div>
		@TaskForm("/todo/item", "Create", formdata, projects)
		@searchBar(projects)
		@TaskList(tasks)
	</div>
	<script>
    if (!window.flipTaskCardDelete) {
      window.flipTaskCardDelete = function(id) {
	toggleClassForId('hidden', 'task-card-back-delete-'+id)
        const inner = document.getElementById('task-card-inner-' + id);
        if (!inner) return;
        inner.style.transform = 'rotateX(180deg)';
      };
    }
    if (!window.flipTaskCardUpdateToBack) {
      window.flipTaskCardUpdateToBack = function(id) {
	toggleClassForId('hidden', 'task-card-back-update-'+id)
        const inner = document.getElementById('task-card-inner-' + id);
        if (!inner) return;
        inner.style.transform = 'rotateX(180deg)';
      };
      }
    if (!window.flipTaskCardUpdateToFront) {
      window.flipTaskCardUpdateToFront = function(id) {
        const inner = document.getElementById('task-card-inner-' + id);
        if (!inner) return;
        inner.style.transform = 'rotateX(0deg)';
	inner.addEventListener('transitionend', function hideBack() {
	        toggleClassForId('hidden', 'task-card-back-update-'+id);
	        inner.removeEventListener('transitionend', hideBack);
	});
      };
    }
	</script>
}

templ TaskList(tasks []*m.TaskView) {
	<div id="task-list-container" class="space-y-4">
		for _, task := range tasks {
			@TaskItemCard(task)
		}
	</div>
}

templ searchBar(projects map[int64]string) {
	<div class="bg-secondary-light dark:bg-secondary-dark mb-4 pb-4 px-4 pt-2 border border-border-light dark:border-border-dark rounded-lg">
		<form
			hx-get="/tasks"
			hx-trigger="submit, keyup delay:500ms changed"
			hx-target="#task-list"
			hx-swap="innerHTML"
			class="grid grid-cols-1 md:grid-cols-3 gap-4"
		>
			@templ_shared.FormTextInput("", "Search", "Search...", "")
			@templ_shared.FormListInputWithAllOption("", "Project", 0, projects)
			@templ_shared.FormTextInput("", "Tag", "Tags comma separated...", "")
		</form>
		<div class="flex flex-wrap gap-2 pt-2">
			<button class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark text-sm font-medium py-2 px-4 rounded-full focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50 border border-border-light dark:border-border-dark shadow-md">
				All
			</button>
			<button class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark text-sm font-medium py-2 px-4 rounded-full focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50 border border-border-light dark:border-border-dark shadow-md">
				Completed
			</button>
			<button class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark text-sm font-medium py-2 px-4 rounded-full focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50 border border-border-light dark:border-border-dark shadow-md">
				Incomplete
			</button>
			<button class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark text-sm font-medium py-2 px-4 rounded-full focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50 border border-border-light dark:border-border-dark shadow-md">
				Overdue
			</button>
		</div>
	</div>
}

templ TaskListTable(tasks []*m.TaskView) {
	<div class="relative items-center overflow-x-auto ">
		<table
			class="mb-2 mx-auto bg-secondary-light dark:bg-secondary-dark text-sm text-left rtl:text-right text-text-on-light dark:text-text-on-dark"
		>
			<thead
				class="text-xs uppercase bg-secondary-light dark:bg-secondary-dark text-text-on-light dark:text-text-on-dark"
			>
				<tr>
					<th scope="col" class="px-6 py-3">
						<p class="hidden lg:block">Status</p>
					</th>
					<th scope="col" class="columns-2xl px-6 py-3">Task</th>
					<th scope="col" class="columns-2xl hidden md:table-cell px-6 py-3">Due Date</th>
					<th scope="col" class="columns-lg hidden lg:table-cell px-6 py-3">Assignee</th>
					<th scope="col" class="columns-lg hidden md:table-cell px-6 py-3">Project</th>
					<th scope="col" class="px-6 py-3">
						<p class="hidden lg:block">Actions</p>
					</th>
				</tr>
			</thead>
			<tbody id="task-rows" class="item-list">
				for _, task := range tasks {
					@TaskRow(task)
				}
			</tbody>
		</table>
		@ts.NoDataRow(len(tasks) > 0)
	</div>
}
