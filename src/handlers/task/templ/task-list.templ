package templ_todo

import (
	m "go-do-the-thing/src/models"
	mf "go-do-the-thing/src/models/forms"
	"go-do-the-thing/src/shared/templ"
	ts "go-do-the-thing/src/shared/templ"
)

templ TaskListWithBody(navbar m.NavBarObject, formdata mf.TaskForm, tasks []*m.TaskView, projects map[int64]string) {
	@ts.Main(TaskListPage(navbar, formdata, tasks, projects))
}

templ TaskListPage(navbar m.NavBarObject, formdata mf.TaskForm, tasks []*m.TaskView, projects map[int64]string) {
	@ts.NavBar(navbar)
	<div id="main-layout" class="grid grid-cols-[100%_0%] h-[calc(100vh-4rem)] transition-[grid-template-columns] duration-300 ease-in-out">
		<div id="main-content" class="overflow-y-auto transition-opacity duration-300 ease-in-out">
			<div class="px-1 sm:px-[5%] xl:px-[10%] w-full text-text-on-light dark:text-text-on-dark mb-10">
				<div class="mx-auto px-4 flex pt-4 items-center justify-between mb-4">
					<p class="font-bold text-xl text-text-on-light dark:text-text-on-dark">TODO: Tasks</p>
					<div>
						@ts.OpenFormButton("New Task", ts.SvgPlus())
					</div>
				</div>
				@ts.FormContainer("/todo/item?source=task_page", TaskFormContent(formdata, projects))
				@searchBar(projects)
				@TaskList(tasks)
			</div>
		</div>
		@EditPanel(m.TaskView{})
	</div>
}

templ TaskList(tasks []*m.TaskView) {
	<div id="task-list-container">
		for _, task := range tasks {
			@TaskItemCard(task)
		}
	</div>
	<script>
function flipTaskCardUpdateToBack(event, id) {
    const method = event.detail.requestConfig.verb.toUpperCase();
    if (method === "GET") {
        return
    }
    if (method === "POST") {
	toggleClassForId('hidden', 'task-card-back-update-'+id)
    } else if (method === "DELETE") {
	toggleClassForId('hidden', 'task-card-back-delete-'+id)
    }
    const inner = document.getElementById('task-card-inner-' + id);
    if (!inner) return;
    inner.style.transform = 'rotateX(180deg)';
};
function flipTaskCardUpdateToFront(event, id) {
    const method = event.detail.requestConfig.verb.toUpperCase();
    if (method === "GET") {
        return
    }
    const inner = document.getElementById('task-card-inner-' + id);
    if (!inner) return;
    inner.style.transform = 'rotateX(0deg)';
    inner.addEventListener('transitionend', function hideBack() {
	toggleClassForId('hidden', 'task-card-back-update-'+id);
	inner.removeEventListener('transitionend', hideBack);
    });
};
</script>
}

templ searchBar(projects map[int64]string) {
	<div class="bg-secondary-light dark:bg-secondary-dark mb-4 pb-4 px-4 pt-2 border border-border-light dark:border-border-dark rounded-lg">
		<form
			hx-get="/tasks"
			hx-trigger="submit, keyup delay:500ms changed"
			hx-target="#task-list"
			hx-swap="innerHTML"
			class="grid grid-cols-1 md:grid-cols-3 gap-4"
		>
			@templ_shared.FormTextInput("", "Search", "Search...", "")
			@templ_shared.FormListInputWithAllOption("", "Project", 0, projects)
			@templ_shared.FormTextInput("", "Tag", "Tags comma separated...", "")
		</form>
		<div class="flex flex-wrap gap-2 pt-2">
			<button class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark text-sm font-medium py-2 px-4 rounded-full focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50 border border-border-light dark:border-border-dark shadow-md">
				All
			</button>
			<button class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark text-sm font-medium py-2 px-4 rounded-full focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50 border border-border-light dark:border-border-dark shadow-md">
				Completed
			</button>
			<button class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark text-sm font-medium py-2 px-4 rounded-full focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50 border border-border-light dark:border-border-dark shadow-md">
				Incomplete
			</button>
			<button class="theme-transition bg-secondary-light dark:bg-secondary-dark hover:opacity-80 text-text-on-light dark:text-text-on-dark text-sm font-medium py-2 px-4 rounded-full focus:outline-none focus:ring-2 focus:ring-accent-light dark:focus:ring-accent-dark focus:ring-opacity-50 border border-border-light dark:border-border-dark shadow-md">
				Overdue
			</button>
		</div>
	</div>
}

templ EditPanel(task m.TaskView) {
	<div
		id="edit-panel"
		class="bg-secondary-light dark:bg-secondary-dark shadow-lg overflow-hidden w-full"
	>
		<div class="w-full h-full flex flex-col">
			<div class="flex justify-between items-center p-4">
				<div class="flex items-center gap-4">
					<button
						onclick="togglePanelWidth()"
						class="text-text-on-light dark:text-text-on-dark hover:opacity-80 transition-transform duration-300"
						id="expand-button"
					>
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5"></path>
						</svg>
					</button>
					<h2 class="text-2xl font-bold text-text-on-light dark:text-text-on-dark">Edit Task</h2>
				</div>
				<button
					onclick="closeEditPanel()"
					class="text-text-on-light dark:text-text-on-dark hover:opacity-80"
				>
					@ts.SvgClose()
				</button>
			</div>
			<div class="relative flex-1 min-h-0 px-4 pb-4">
				<div id="edit-panel-content" class="space-y-4 h-full overflow-y-auto"></div>
				<div id="edit-panel-loader" class="absolute inset-0 justify-center items-center bg-secondary-light bg-opacity-80 dark:bg-secondary-dark dark:bg-opacity-80 z-50 my-indicator">
					<div class="loader-bounce flex space-x-2">
						<div class="w-4 h-4 bg-primary-light dark:bg-primary-dark rounded-full animate-bounce-balls" style="animation-delay:0s"></div>
						<div class="w-4 h-4 bg-primary-light dark:bg-primary-dark rounded-full animate-bounce-balls" style="animation-delay:0.2s"></div>
						<div class="w-4 h-4 bg-primary-light dark:bg-primary-dark rounded-full animate-bounce-balls" style="animation-delay:0.4s"></div>
					</div>
				</div>
				<style>
				@keyframes bounce-balls {
					0%, 80%, 100% { transform: translateY(0); }
					40% { transform: translateY(-20px); }
				}
				.animate-bounce-balls {
					display: inline-block;
					animation: bounce-balls 1.2s infinite both;
				}
				</style>
			</div>
		</div>
	</div>
	<script>
	function openEditPanel() {
		const layout = document.getElementById('main-layout');
		const mainContent = document.getElementById('main-content');
		layout.classList.remove('grid-cols-[100%_0%]', 'grid-cols-[0%_100%]');
		layout.classList.add('grid-cols-[50%_50%]');
		mainContent.classList.remove('opacity-0');
	}

	function closeEditPanel() {
		const layout = document.getElementById('main-layout');
		const mainContent = document.getElementById('main-content');
		const expandButton = document.getElementById('expand-button');
		layout.classList.remove('grid-cols-[50%_50%]', 'grid-cols-[0%_100%]');
		layout.classList.add('grid-cols-[100%_0%]');
		expandButton.classList.remove('rotate-180');
		mainContent.classList.remove('opacity-0');
	}

	function togglePanelWidth() {
		const layout = document.getElementById('main-layout');
		const mainContent = document.getElementById('main-content');
		const expandButton = document.getElementById('expand-button');
		if (layout.classList.contains('grid-cols-[50%_50%]')) {
			// Expand to full width
			layout.classList.remove('grid-cols-[50%_50%]');
			layout.classList.add('grid-cols-[0%_100%]');
			expandButton.classList.add('rotate-180');
			mainContent.classList.add('opacity-0');
		} else {
			// Collapse to 50% width
			layout.classList.remove('grid-cols-[0%_100%]');
			layout.classList.add('grid-cols-[50%_50%]');
			expandButton.classList.remove('rotate-180');
			mainContent.classList.remove('opacity-0');
		}
	}
	</script>
}
