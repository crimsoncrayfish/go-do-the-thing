package templ_todo

import (
	"fmt"
	"go-do-the-thing/src/models"
	templ_shared "go-do-the-thing/src/shared/templ"
)

templ TaskRow(task models.TaskView) {
	<tr
		id="task-row-{{.Id}}"
		class="transition-transform cursor-pointer text-gray-900 dark:text-gray-50
        odd:bg-white odd:dark:bg-gray-900
        even:bg-gray-50 even:dark:bg-gray-800
        hover:bg-gray-100 hover:dark:bg-gray-700 border-b dark:border-gray-700 "
	>
		@taskRowContent(task)
	</tr>
}

templ taskRowOOB(task models.TaskView) {
	<tbody id="task-rows" hx-swap-oob="afterbegin">
		<tr
			id="task-row-{{.Id}}"
			class="transition-transform cursor-pointer text-gray-900 dark:text-gray-50
        odd:bg-white odd:dark:bg-gray-900
        even:bg-gray-50 even:dark:bg-gray-800
        hover:bg-gray-100 hover:dark:bg-gray-700 border-b dark:border-gray-700 "
		>
			@taskRowContent(task)
		</tr>
	</tbody>
}

templ taskRowContent(task models.TaskView) {
	<td class="pl-5 w-0 mx-auto">
		<div hx-swap="outerHTML" hx-target="closest tr" hx-post="/todo/item/status/{.Id}">
			@statusIcon(task)
		</div>
	</td>
	<td hx-swap="outerHTML" hx-target="body" hx-get="/todo/item/{.Id}" class="px-6 py-4 font-medium text-xl">
		if task.Name != "" {
			task.Name
		} else {
			task.Description
		}
		<dl class="text-sm">
			if task.Name != "" {
				<dt class="sr-only">Description</dt>
				<dd class="font-light text-wrap">{ task.Description }</dd>
			}
			<dt class="sr-only lg:hidden">Assigned To</dt>
			<dd class="font-light lg:hidden">{ task.AssignedTo }</dd>
			<dt class="sr-only md:hidden">Due date</dt>
			<dd class="font-light md:hidden">{ task.DueDate.Time.Format("2006-01-02") }</dd>
			<dt class="sr-only xl:hidden">Tag</dt>
			<dd class="font-light xl:hidden">{ task.Tag }</dd>
		</dl>
	</td>
	<td hx-swap="outerHTML" hx-target="body" hx-get="/todo/item/{.Id}" class="hidden md:table-cell px-6 py-4">
		{ task.DueDate.Time.Format("2006-01-02") }
	</td>
	<td hx-swap="outerHTML" hx-target="body" hx-get="/todo/item/{.Id}" class="hidden lg:table-cell px-6 py-4">
		{ task.AssignedTo }
	</td>
	<td hx-swap="outerHTML" hx-target="body" hx-get="/todo/item/{.Id}" class="hidden xl:table-cell px-6 py-4">
		{ task.Tag }
	</td>
	<td class="px-6 py-4">
		<button
			class="text-red-500"
			hx-swap="outerHTML swap:0.5s"
			hx-target="closest tr"
			hx-on--after-request={ fmt.Sprintf("toggleClassForId('-translate-x-full','task-row-%d')", task.Id) }
			hx-delete={ fmt.Sprintf("/todo/item/%d", task.Id) }
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 24 24"
				stroke-width="1.5"
				stroke="currentColor"
				class="size-6"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"
				></path>
			</svg>
		</button>
	</td>
}

templ statusIcon(task models.TaskView) {
	<div
		if task.Status==models.Completed {
			class="text-green-400"
		}
		else
		if beforeNow(task) {
			class="text-red-500"
		} else {
			class="text-yellow-500"
		}
	>
		if task.Status == models.Completed {
			@templ_shared.SvgCheck()
		} else {
			@templ_shared.SvgWait()
		}
	</div>
}

func beforeNow(task models.TaskView) bool {
	beforenow, _ := task.DueDate.BeforeNow()
	return beforenow
}
